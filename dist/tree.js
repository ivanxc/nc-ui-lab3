class Tree{constructor(e){this._root=e}add(e){this.addRecursive(e,this._root)}addRecursive(e,t){e.value<t.value?null!==t.leftNode?this.addRecursive(e,t.leftNode):t.leftNode=e:null!==t.rightNode?this.addRecursive(e,t.rightNode):t.rightNode=e}findNodeByValue(e){let t=this._root;for(;null!==t&&t.value!==e;)t=e<t.value?t.leftNode:t.rightNode;return null===t?null:t}getPatchToNode(e){let t=[],l=this._root;for(;null!==l&&l.value!==e;)t.push(l),l=e<l.value?l.leftNode:l.rightNode;return null===l?null:t}remove(l){let o=this._root,d=this._root;for(;null!==o&&o.value!==l;)d=o,o=l<o.value?o.leftNode:o.rightNode;if(null===o)return!1;if(null===o.leftNode&&null===o.rightNode)l<d.value?d.leftNode=null:d.rightNode=null;else if(null!==o.leftNode&&null===o.rightNode)l<d.value?d.leftNode=o.leftNode:d.rightNode=o.leftNode;else if(null===o.leftNode&&null!==o.rightNode)l<d.value?d.leftNode=o.rightNode:d.rightNode=o.rightNode;else if(null!==o.leftNode&&null!==o.rightNode)if(null===o.rightNode.leftNode)l<d.value?(d.leftNode=o.rightNode,d.leftNode.leftNode=o.leftNode):(d.rightNode=o.rightNode,d.rightNode.leftNode=o.leftNode);else{var r=o.rightNode.leftNode;let e=this.getLeftmostSheetOf(r),t=null===(r=this.getPatchToNode(e.value))||void 0===r?void 0:r.at(-1);void 0!==t&&(t.leftNode=e.rightNode),l<d.value?d.leftNode=e:d.rightNode=e,e.rightNode=o.rightNode,e.leftNode=o.leftNode}return!0}removeLeftmostSheetOf(e){e=this.getLeftmostSheetOf(e);return this.remove(e.value),e}getLeftmostSheetOf(e){let t=e;for(;null!==t.leftNode;)t=t.leftNode;return t}}export{Tree};